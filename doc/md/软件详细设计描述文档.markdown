# 企业进销存系统 SIMS(Sales Invoicing Management System)

# 软件详细设计描述文档

# 草稿

## plsw软工二小组

## 2017-10-30


## 目录

### 1.引言

    **1.1　编制目的**
    **1.2　词汇表**
    **1.3　参考资料**

### 2.产品概述

### 3.体系结构设计概述

### 4.结构视角

    **4.1　业务逻辑层的分解**

## 更新历史

| **修改人员** | **日期**     | **变更原因** | **版本号** |
| -------- | ---------- | -------- | ------- |
| 王灿灿 | 2017-10-30 | 添加accountbl模块 | v1.1 |
| 潘星宇 | 2017-11-01 | 添加commoditybl模块 | v1.1 |
| 李杰 | 2017-11-02 | 添加salesbl模块、memberbl模块 | v1.1 |
| 潘星宇 | 2017-11-05 | 添加userbl模块 | v1.1 |
| 李杰 | 2017-11-07 | 添加purchase模块 | v1.1 |


## 1.引言
<br/>
　　**1.1　编制目的**

　　本报告详细完成对企业进销存系统的详细设计，达到指导后续软件构造的目的，同时实现和测试人员及用户的沟通。

　　本报告面向开发人员、测试人员及最终用户而编写，是了解系统的导航。

　　**1.2　词汇表**

|词汇名称|词汇含义|备注|
| --- | --- | --- |
|SIMS|企业进销存系统|……|
<br/>
　　**1.3　参考资料**

## 2.产品概述
<br/>
　　参考企业进销存系统用例文档和企业进销存系统软件需求规格说明文档中对产品的概括描述。

## 3.体系结构设计概述
<br/>
　　参考企业进销存系统概要设计文档中对体系结构设计的概述。

## 4.结构视角
<br/>
　　**4.1　业务逻辑层的分解**

　　业务逻辑层的开发包图参见软件体系结构文档图。

　　　　4.1.1　accountbl模块

　　　　(1)模块概述

　　　　accountbl模块承担的需求参见需求规格说明文档功能需求几相关非功能需求。
　　　　Accountbl模块的职责及接口参见软件体系结构描述文档表。

　　　　(2)整体结构

　　　　根据体系结构的设计，我们将系统分为展示层、业务逻辑层、数据层。每一层之间为了增加灵活性，我们会添加接口。比如展示层和业务逻辑层之间，我们添加businesslogicservice.accountblservice.AccountBLService接口。业务逻辑层和数据层之间添加dataservice.accountdataservice.AccountDataService接口。为了隔离业务逻辑职责和逻辑控制职责，我们增加了AccountController，这样AccountController将会对账户管理的业务逻辑处理委托给Account对象。AccountPO是作为账户记录的持久化对象被添加到设计模型中去的。

　　　　accountbl模块的设计如图所示。

<img src="../img/软件详细设计图/accountbl模块设计图.png">

　　accountbl模块各个类的职责如下所示

　　　　(3)模块内部类的接口规范

　　　　(4)业务逻辑层的动态模型

　　　　以下四个图分别表明了企业进销存系统中，对银行账户进行增删改查的逻辑处理的相关对象之间的协作

<img src="../img/软件详细设计图/account_add顺序图.png">

<img src="../img/软件详细设计图/account_delete顺序图.png">

<img src="../img/软件详细设计图/account_modify顺序图.png">

<img src="../img/软件详细设计图/account_find顺序图.png">

4.1.2 commoditybl 模块<br>
（1）模块概述<br>
commoditybl模块承担的需求参见需求规格说明文档功能需求及相关非功能需求。<br>
commoditybl模块的职责及接口参见软件系统结构描述文档表<br>
 （2）整体结构<br>
根据体系结构的设计，我们将系统分为展示层、业务逻辑层、数据层。每一层之间为了增加灵活性，我们会添加接口。比如展示层和业务逻辑层之间，我们添加bussinesslogicservice.commodityblservice.CommodityBLService接口。业务逻辑层和数据层之间添加dataservice.commoditydataservice.CommodityDataService接口。为了隔离业务逻辑职责和逻辑控制职责，我们增加了CommodityController，这样CommodityController会将对商品的业务逻辑处理委托给Commodity对象。CommodityPO是作为商品记录的持久化对象呗添加到设计模型中去的。而CommodityList和CommodityItem的添加时Billinfo的容器类。CommodityItem保有具体商品的数据，及相应的计算小计的职责。而Classification是作为商品的分类而聚合在其中。CommodityList封装了关于Commodity的数据集合的数据结构的秘密和计算总数的职责。Salesinfo和Billinfo是根据依赖倒置原则，为了消除循环依赖而产生的接口。<br>
<img src="../img/软件详细设计图/commodity模块各个类的设计.png"><br>
<center>**commodity模块各个类的设计**</center>
<table><tbody>
<tr>
<th>模  块</th>
<th>职  责</th>
</tr>
<tr>
<th>LoginController</th>
<th>负责实现对应于登录界面所需要的服务</th>
</tr>
<tr>
<th>CommodityController</th>
<th>负责实现商品界面所需要的服务</th>
</tr>
<th>User</th>
<th>系统用户的领域模型对象，拥有用户数据的姓名和密码，可以解决登录问题</th>
</tr>
<tr>
<th>Commodity</th>
<th>商品的领域模型对象，拥有一个商品所持有的数量、售价等信息，可以帮助完成商品界面所需要的服务</th>
</tr>
</table>
（3）模块内部类的接口规范
<center>**CommodityController的接口规范**</center>
<table><tbody>
<tr>
<th colspan = "3">提供的服务（供接口）</th>
</tr>
<tr>
<th rowspan="3">CommodityController.addBill</th>
<th>语法</th>
<th>public ResultMessage addBill(CommodityPO po)</th>
</tr>
<tr>
<th>前置条件</th>
<th>已创建一个Commodity领域对象，并且输入符合输入规则</th>
</tr>
<tr>
<th>后置条件</th>
<th>调用Commodity领域对象的addBill方法</th>
</tr>
<tr>
<th rowspan="3">CommodityController.addSales</th>
<th>语法</th>
<th>public ResultMessage addSales(CommodityPO po)</th>
</tr>
<tr>
<th>前置条件</th>
<th>已创建一个Commodity领域对象，并且输入符合输入规则</th>
</tr>
<tr>
<th>后置条件</th>
<th>调用Commodity领域对象的addSales方法</th>
</tr>
<tr>
<th rowspan="3">CommodityController.getTotal</th>
<th>语法</th>
<th>public ResultMessage getTotal(CommodityPO po)</th>
</tr>
<tr>
<th>前置条件</th>
<th>已创建一个Commodity领域对象，已添加商品和数量，并且输入符合输入规则</th>
</tr>
<tr>
<th>后置条件</th>
<th>调用Commodity领域对象的getTotal方法</th>
</tr>
</table>

<center>**Commodity的接口规范**</center>
<table><tbody>
<tr>
<th colspan="3">提供的服务（供接口）</th>
</tr>
<tr>
<th rowspan="3">Commodity.addBill</th>
<th>语法</th>
<th>public ResultMessage addBill(CommodityPO po)</th>
</tr>
<tr>
<th>前置条件</th>
<th>启动一个商品增减回合</th>
</tr>
<tr>
<th>后置条件</th>
<th>在一个商品增加回合中，生成一个单据</th>
</tr>
<tr>
<th rowspan="3">Commodity.addSales</th>
<th>语法</th>
<th>public ResultMessage addSales(CommodityPO po)</th>
</tr>
<tr>
<th>前置条件</th>
<th>启动一个商品增减回合</th>
</tr>
<tr>
<th>后置条件</th>
<th>在一个商品增加回合中，生成一次销售记录</th>
</tr>
<tr>
<th rowspan="3">Commodity.getTotal</th>
<th>语法</th>
<th>public ResultMessage getTotal(CommodityPO po)</th>
</tr>
<tr>
<th>前置条件</th>
<th>已进行一次商品的增减</th>
</tr>
<tr>
<th>后置条件</th>
<th>返回商品数量的总数</th>
</tr>
</table>
<table><tbody>
<tr>
<th colspan = "2">需要的服务（需接口）</th>
</tr>
<tr>
<th>服务名</th>
<th>服务</th>
</tr>
<tr>
<th>CommodityDataService.find(long id)</th>
<th>根据ID进行查找单一持久化对象</th>
</tr>
<tr>
<th>CommodityDataService.finds(String field,int value)</th>
<th>根据字段名和值查找多个持久化对象</th>
</tr>
<tr>
<th>CommodityDataService.insert(CommodityPO po)</th>
<th>插入单一持久化对象</th>
</tr>
<tr>
<th>CommodityDataService.delete(CommodityPO po)</th>
<th>删除单一持久化对象</th>
</tr>
<tr>
<th>CommodityDataService.update(CommodityPO po)</th>
<th>更新单一持久化对象</th>
</tr>
<tr>
<th>DataFactory.getCommodityDatabase</th>
<th>得到Commodity数据库的服务的引用</th>
</tr>
</table>

（4）业务逻辑层的动态模型
该图表明了SIMS系统中，当用户点击输入新增添的商品之后，商品业务逻辑处理相关对象之间的协作<br>
<img src="../img/软件详细设计图/添加商品的顺序图.png"><br>
该图表明了SIMS系统中，当用户点击输入删除的商品之后，商品业务逻辑处理相关对象之间的协作<br>
<img src="../img/软件详细设计图/删除商品的顺序图.png"><br>
该图表明了SIMS系统中，当用户点击输入修改的商品之后，商品业务逻辑处理相关对象之间的协作<br>
<img src="../img/软件详细设计图/修改商品的顺序图.png"><br>
该图表明了SIMS系统中，当用户点击输入查询商品之后，商品业务逻辑处理相关对象之间的协作<br>
<img src="../img/软件详细设计图/查询商品的顺序图.png"><br>

4.1.3 userbl 模块<br>
（1）模块概述<br>
userbl模块承担的需求参见需求规格说明文档功能需求及相关非功能需求。<br>
userbl模块的职责及接口参见软件系统结构描述文档表<br>
（2）整体结构<br>
根据体系结构的设计，我们将系统分为展示层、业务逻辑层、数据层。每一层之间为了增加灵活性，我们会添加接口。比如展示层和业务逻辑层之间，我们添加bussinesslogicservice.userblservice.UserBLService接口。业务逻辑层和数据层之间添加dataservice.userdataservice.UserDataService接口。UserPO是作为商品记录的持久化对象添加到设计模型中去的。<br>
<img src="../img/软件详细设计图/userbl模块各个类的设计.png"><br>
<center>**user模块各个类的设计**</center>
<table><tbody>
<tr>
<th>模  块</th>
<th>职  责</th>
</tr>
<tr>
<th>LoginController</th>
<th>负责实现对应于登录界面所需要的服务</th>
</tr>
<th>User</th>
<th>系统用户的领域模型对象，拥有用户数据的姓名和密码，可以解决登录问题</th>
</tr>
</table>
（3）模块内部类的接口规范
<center>**User的接口规范**</center>
<table><tbody>
<tr>
<th colspan = "3">提供的服务（供接口）</th>
</tr>
<tr>
<th rowspan="3">user.getAuthority</th>
<th>语法</th>
<th>public ResultMessage getAuthority()</th>
</tr>
<tr>
<th>前置条件</th>
<th>已创建一个user领域对象，并且其权限已被赋值</th>
</tr>
<tr>
<th>后置条件</th>
<th>调用User领域对象的getAuthority方法</th>
</tr>
<tr>
<th rowspan="3">user.getRole</th>
<th>语法</th>
<th>public ResultMessage getRole()</th>
</tr>
<tr>
<th>前置条件</th>
<th>已创建一个user领域对象，并且其角色已被确认</th>
</tr>
<tr>
<th>后置条件</th>
<th>调用User领域对象的getRole方法</th>
</tr>
</table>

<table><tbody>
<tr>
<th colspan = "2">需要的服务（需接口）</th>
</tr>
<tr>
<th>服务名</th>
<th>服务</th>
</tr>
<tr>
<th>UserDataService.find(long id)</th>
<th>根据ID进行查找单一持久化对象</th>
</tr>
<tr>
<th>UserDataService.insert(UserPO po)</th>
<th>插入单一持久化对象</th>
</tr>
<tr>
<th>UserDataService.delete(UserPO po)</th>
<th>删除单一持久化对象</th>
</tr>
<tr>
<th>UserDataService.update(UserPO po)</th>
<th>更新单一持久化对象</th>
</tr>
<tr>
<th>DataFactory.getUserDatabase</th>
<th>得到User数据库的服务的引用</th>
</tr>
</table>

（4）业务逻辑层的动态模型
该图表明了SIMS系统中，当用户点击输入新增添的用户之后，商品业务逻辑处理相关对象之间的协作<br>
<img src="../img/软件详细设计图/添加用户的顺序图.png"><br>
该图表明了SIMS系统中，当用户点击输入删除的用户之后，商品业务逻辑处理相关对象之间的协作<br>
<img src="../img/软件详细设计图/删除用户的顺序图.png"><br>
该图表明了SIMS系统中，当用户点击输入修改的用户之后，商品业务逻辑处理相关对象之间的协作<br>
<img src="../img/软件详细设计图/修改用户的顺序图.png"><br>
该图表明了SIMS系统中，当用户点击输入查询用户之后，商品业务逻辑处理相关对象之间的协作<br>
<img src="../img/软件详细设计图/查询用户的顺序图.png"><br>


4.1.4 salesbl 模块<br>
（1）模块概述<br>
salesbl模块承担的需求参见需求规格说明文档功能需求及相关非功能需求。<br>
salesbl模块的职责及接口参见软件系统结构描述文档表<br>

（2）整体结构<br>
根据体系结构的设计，我们将系统分为展示层、业务逻辑层、数据层。每一层之间为了增加灵活性，我们会添加接口。比如展示层和业务逻辑层之间，我们添加bussinesslogicservice. SaleBLService接口。业务逻辑层和数据层之间添加dataservice. SaleDataService接口。为了隔离业务逻辑职责和逻辑控制职责，我们增加了SaleController，这样SaleController会将对销售的逻辑业务处理委托给Sale对象。SalePO是作为销售单的持久化对象被添加到设计模型中去的。
Salebl模块的设计如图所示
<img src="../img/软件详细设计图/Saales模块.png"><br>

salesbl模块各个类的职责
| 模块 | 职责 |
| SalesController | 负责实现销售管理界面所需要的服务 |
| Sales | 制定销售单的领域模型对象，拥有销售单的信息 |
| SalesList | 负责每一个销售单的数据 |
| SalesListItem | 销售单数据里的条目 |

（3）模块内部类的接口规范<br>
<center>**SalesController的接口规范**</center>
<table><tbody>
<tr>
<th colspan = "3">提供的服务（供接口）</th>
</tr>
<tr>
<th rowspan="3">SalesController.getSalesID</th>
<th>语法</th>
<th>public String getSalesID()</th>
</tr>
<tr>
<th>前置条件</th>
<th>已创建一个Sale领域对象，并且输入符合输入规则</th>
</tr>
<tr>
<th>后置条件</th>
<th>调用Sale的方法</th>
</tr>
<tr>
<th rowspan="3">SalesController.getSaleBackID</th>
<th>语法</th>
<th>public String getSaleBackID()</th>
</tr>
<tr>
<th>前置条件</th>
<th>已创建一个Sale领域对象，并且输入符合输入规则</th>
</tr>
<tr>
<th>后置条件</th>
<th>调用Sales领域对象的方法</th>
</tr>
<tr>
<th rowspan="3">SalesController.addCommodities</th>
<th>语法</th>
<th>public void addCommodities(CommodityItem item)</th>
</tr>
<tr>
<th>前置条件</th>
<th>已创建一个Sale领域对象，添加商品和数量，并且输入符合输入规则</th>
</tr>
<tr>
<th>后置条件</th>
<th>调用Sale领域对象的addCommodities方法</th>
</tr>
<tr>
<th rowspan="3">SalesController.deteleCommodities</th>
<th>语法</th>
<th>public void deleteCommodities(CommodityPO po)</th>
</tr>
<tr>
<th>前置条件</th>
<th>已创建一个Sale领域对象，删除商品，并且输入符合输入规则</th>
</tr>
<tr>
<th>后置条件</th>
<th>调用Sale领域对象的deleteCommodities方法</th>
</tr>
<tr>
<th rowspan="3">SalesController.findCommodities</th>
<th>语法</th>
<th>public void findCommodities(CommodityPO po)</th>
</tr>
<tr>
<th>前置条件</th>
<th>已创建一个Sale领域对象，查找商品与其数量，并且输入符合输入规则</th>
</tr>
<tr>
<th>后置条件</th>
<th>调用Sale领域对象的findCommodities方法</th>
</tr>
<tr>
<th rowspan="3">SalesController.updateCommodities</th>
<th>语法</th>
<th>public void updateCommodities(CommodityItem item)</th>
</tr>
<tr>
<th>前置条件</th>
<th>已创建一个Sale领域对象，修改商品和数量，并且输入符合输入规则</th>
</tr>
<tr>
<th>后置条件</th>
<th>调用Sale领域对象的updateCommodities方法</th>
</tr>
<tr>
<th rowspan="3">SalesController.save</th>
<th>语法</th>
<th>public SlaesVO save()</th>
</tr>
<tr>
<th>前置条件</th>
<th>已创建一个Sale领域对象</th>
</tr>
<tr>
<th>后置条件</th>
<th>调用Sale领域对象的方法</th>
</tr>
<tr>
<th rowspan="3">SalesController.submit</th>
<th>语法</th>
<th>public Sales submit()</th>
</tr>
<tr>
<th>前置条件</th>
<th>已创建一个Sale领域对象</th>
</tr>
<tr>
<th>后置条件</th>
<th>调用Sale领域对象的方法</th>
</tr>
</table>

<table><tbody>
<tr>
<th colspan = "2">需要的服务（需接口）</th>
</tr>
<tr>
<th>服务名</th>
<th>服务</th>
</tr>
<tr>
<th>Sales.getSalesID</th>
<th>获取进货单的ID</th>
</tr>
<tr>
<th>Sales.getSaleBackID</th>
<th>获取进货退货单的ID</th>
</tr>
<tr>
<th>salesDataService.addCommodities(CommodityPO po)</th>
<th>插入单一持久化对象</th>
</tr>
<tr>
<th>SalesDataService.deleteCommodities(CommodityPO po)</th>
<th>删除单一持久化对象</th>
</tr>
<tr>
<th>SalesDataService.updateCommodities(CommodityPO po)</th>
<th>更新单一持久化对象</th>
</tr>
<tr>
<tr>
<th>Sales.save</th>
<th>保存草稿</th>
</tr>
<th>Sales.submit</th>
<th>提交单据</th>
</tr>
</table>


<center>**Sales的接口规范**</center>
<table><tbody>
<tr>
<th colspan="3">提供的服务（供接口）</th>
</tr>
<tr>
<th rowspan="3">Commodity.addBill</th>
<th>语法</th>
<th>public ResultMessage addBill(CommodityPO po)</th>
</tr>
<tr>
<th>前置条件</th>
<th>启动一个商品增减回合</th>
</tr>
<tr>
<th>后置条件</th>
<th>在一个商品增加回合中，生成一个单据</th>
</tr>
<tr>
<th rowspan="3">Commodity.addSales</th>
<th>语法</th>
<th>public ResultMessage addSales(CommodityPO po)</th>
</tr>
<tr>
<th>前置条件</th>
<th>启动一个商品增减回合</th>
</tr>
<tr>
<th>后置条件</th>
<th>在一个商品增加回合中，生成一次销售记录</th>
</tr>
<tr>
<th rowspan="3">Commodity.getTotal</th>
<th>语法</th>
<th>public ResultMessage getTotal(CommodityPO po)</th>
</tr>
<tr>
<th>前置条件</th>
<th>已进行一次商品的增减</th>
</tr>
<tr>
<th>后置条件</th>
<th>返回商品数量的总数</th>
</tr>
</table>

<table><tbody>
<tr>
<th colspan = "2">需要的服务（需接口）</th>
</tr>
<tr>
<th>服务名</th>
<th>服务</th>
</tr>
<tr>
<th>CommodityDataService.find(long id)</th>
<th>根据ID进行查找单一持久化对象</th>
</tr>
<tr>
<th>CommodityDataService.finds(String field,int value)</th>
<th>根据字段名和值查找多个持久化对象</th>
</tr>
<tr>
<th>CommodityDataService.insert(CommodityPO po)</th>
<th>插入单一持久化对象</th>
</tr>
<tr>
<th>CommodityDataService.delete(CommodityPO po)</th>
<th>删除单一持久化对象</th>
</tr>
<tr>
<th>CommodityDataService.update(CommodityPO po)</th>
<th>更新单一持久化对象</th>
</tr>
<tr>
<th>DataFactory.getCommodityDatabase</th>
<th>得到Commodity数据库的服务的引用</th>
</tr>
</table>

（4）业务逻辑层的动态模型<br>
该图展示了进货销售人员想在销售单／销售退货单中添加一个商品的时候，销售业务逻辑处理的相关对象之间的协作<br>
该图展示了进货销售人员想要提交一个销售单／销售退货单，销售业务逻辑处理的相关对象之间的协作<br>
该图展示了进货销售人员想要保存一个销售单／销售退货单，销售业务逻辑处理的相关对象之间的协作<br>

4.1.5 memberbl 模块<br>
（1）模块概述<br>
memberbl模块承担的需求参见需求规格说明文档功能需求及相关非功能需求。<br>
memberbl模块的职责及接口参见软件系统结构描述文档表<br>

（2）整体结构<br>
根据体系结构的设计，我们将系统分为展示层、业务逻辑层、数据层。每一层之间为了增加灵活性，我们会添加接口。比如展示层和业务逻辑层之间，我们添加bussinesslogicservice. MemberBLService接口。业务逻辑层和数据层之间添加dataservice. MemberDataService接口。为了隔离业务逻辑职责和逻辑控制职责，我们增加了MemberController，这样MemberController会将对客户的逻辑业务处理委托给Member对象。MemberPO是作为客户的持久化对象被添加到设计模型中去的。
Memberbl模块的设计如图

<img src="../img/软件详细设计图/Member模块各个类的设计.png">
<center>**member模块各个类的设计**</center>

Memberbl各个类的职责如图
| **模块** | **职责** |
| MemberController | 负责实现客户管理界面所需要的服务 |
| Member | 客户管理的领域模型对象，拥有客户数据的编号、分类、级别、姓名、电话、地址、邮编、电子邮箱、应收额度、应收、应付、默认业务员 |

（3）模块内部类的接口规范<br>
<center>**Member的接口规范**</center>
<table><tbody>
<tr>
<th colspan="3">提供的服务（供接口）</th>
</tr>
<tr>
<th rowspan="3">Member.findMember</th>
<th>语法</th>
<th>public ResultMessage findMember(String keywords, string id)</th>
</tr>
<tr>
<th>前置条件</th>
<th>关键字符合输入条件，id符合输入条件</th>
</tr>
<tr>
<th>后置条件</th>
<th>查询到目标客户</th>
</tr>
<tr>
<th rowspan="3">Member.addMember</th>
<th>语法</th>
<th>public ResultMessage addMember(MemberPO po)</th>
</tr>
<tr>
<th>前置条件</th>
<th>类型、名字、级别、电话、地址、邮编等符合输入条件</th>
</tr>
<tr>
<th>后置条件</th>
<th>成功添加客户，持久化更新客户的数据</th>
</tr>
<tr>
<th rowspan="3">Member.updateMember</th>
<th>语法</th>
<th>public ResultMessage upddteMember(MemberPO po)</th>
</tr>
<tr>
<th>前置条件</th>
<th>修改的属性符合输入条件</th>
</tr>
<tr>
<th>后置条件</th>
<th>客户属性被成功修改，持久化更新客户的数据</th>
</tr>
<tr>
<th rowspan="3">Member.deleteMember</th>
<th>语法</th>
<th>public ResultMessage deleteMember(String name)</th>
</tr>
<tr>
<th>前置条件</th>
<th>输入的客户符合输入条件</th>
</tr>
<tr>
<th>后置条件</th>
<th>客户被成功删除，持久化更新客户的数据</th>
</tr>
</table>
<table><tbody>

<table><tbody>
<tr>
<th colspan = "2">需要的服务（需接口）</th>
</tr>
<tr>
<th>服务名</th>
<th>服务</th>
</tr>
<tr>
<th>MemberDataService.findMember(String id)</th>
<th>根据ID进行查找单一持久化对象</th>
</tr>
<tr>
<th>MemberDataService.addMember(MemberPO po)</th>
<th>添加单一持久化对象</th>
</tr>
<tr>
<th>MemberDataService.deleteMember(MemberPO po)</th>
<th>删除单一持久化对象</th>
</tr>
<tr>
<th>MemberDataService.updateMember(MemberPO po)</th>
<th>更改单一持久化对象</th>
</tr>
<tr>
<th>MemberDataService.getMemberDatebase</th>
<th>得到Member数据库的服务的引用</th>
</tr>
</table>

（4）业务逻辑层的动态模型<br>
该图展示了当进货销售人员想要添加一个客户的时候，客户管理业务逻辑处理的相关对象之间的协作<br>
<img src="../img/软件详细设计图/addMember.png">

该图展示了当进货销售人员想要删除一个客户的时候，客户管理业务逻辑处理的相关对象之间的协作<br>
<img src="../img/软件详细设计图/deleteMember.png">

4.1.6 purchasebl 模块<br>
（1）模块概述<br>
purchasebl模块承担的需求参见需求规格说明文档功能需求及相关非功能需求。<br>
purchasebl模块的职责及接口参见软件系统结构描述文档表<br>

（2）整体结构<br>
根据体系结构的设计，我们将系统分为展示层、业务逻辑层、数据层。每一层之间为了增加灵活性，我们会添加接口。比如展示层和业务逻辑层之间，我们添加bussinesslogicservice. PurchaseBLService接口。业务逻辑层和数据层之间添加dataservicePurchaseDataService接口。为了隔离业务逻辑职责和逻辑控制职责，我们增加了PurchaseController，这样PurchaseController会将对进货的逻辑业务处理委托给Purchase对象。PurchasePO是作为进货单的持久化对象被添加到设计模型中去的。
如图展示了Purchaseb模块的设计

（3）模块内部类的接口规范<br>

（4）业务逻辑层的动态模型<br>
该图所示展示了当一名进货销售人员想要将商品添加进进货单时，进货业务逻辑处理的相关对象之间的协作<br>
该图展示了进货人员需要进行单据的提交时，进货业务逻辑处理的相关对象之间的协作<br>
图展示了进货人员需要进行单据的保存时，进货业务逻辑处理的相关对象之间的协作<br>


##5.依赖视角
下面两图是客户端和服务器各自的包之间的依赖关系<br>
<img src="../img/客户端开发包图.png"><br>
<center>客户端包图</center>
<img src="../img/服务端开发包.png"><br>
<center>服务器端端包图</center>
